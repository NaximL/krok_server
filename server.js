const express = require("express");
const { VoiceResponse } = require("twilio").twiml;
const client = require("twilio")("AC63da8572bb2de133aea49941b89056b5", "cb9bebd467d6bd9c793e80f1cc9fea97");
const TelegramBot = require("node-telegram-bot-api");
const cors = require("cors");

const API_KEY_BOT = "8061891034:AAGXiMbTsGWcMezY7j72h1yGAvhDptb1Cgs";
const bot = new TelegramBot(API_KEY_BOT, { webHook: true });


const URL = process.env.APP_URL || "https://serverdf-5c9c8eec8694.herokuapp.com";


const but1 = '–ü—Ä–æ—Ç–∏–¥—ñ—è –Ω–∞—Å–∏–ª—å—Å—Ç–≤—É üö´';
const but2 = '–ï–∫—Å—Ç—Ä–µ–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ üöë';
const start_key = [[but1], [but2]];

const nasl_bat1 = "–ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞ üÜò";
const nasl_bat2 = "–î—ñ–∑–Ω–∞–π—Å—è —á–∏ —î –Ω–∞—Å–∏–ª—å—Å—Ç–≤–æ –≤ —Ç–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ ‚ùì";
const nasl_bat3 = "–Ø–∫—É –¥–æ–ø–æ–º–æ–≥—É —è –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ ü§ù";
const nasl_key = [[nasl_bat1], [nasl_bat2], [nasl_bat3]];

const l_bat1 = "–Ø - –¥–∏—Ç–∏–Ω–∞ –∞–±–æ –ø—ñ–¥–ª—ñ—Ç–æ–∫ üë∂üßí";
const l_bat2 = "–Ø - –¥–æ—Ä–æ—Å–ª–∏–π üë®üë©";
const nfl_key = [[l_bat1], [l_bat2]];






const nasls_bat1 = "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ üß†üí¨";
const nasls_bat2 = "–¢–∏–º—á–∞—Å–æ–≤–∏–π –ø—Ä–∏—Ç—É–ª–æ–∫ –¥–ª—è –∂—ñ–Ω–æ–∫ —Ç–∞ –¥—ñ—Ç–µ–π üè†üë©üëß";
const nasls_bat3 = "–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥ ü§≤";
const nasls_bat4 = "–°–ø—Ä–∏—è–Ω–Ω—è –≤ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —é—Ä–∏–¥–∏—á–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ ‚öñÔ∏è";
const nasls_bat5 = "–°–ø—Ä–∏—è–Ω–Ω—è –≤ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–µ–¥–∏—á–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ üè•";
const nasls_key = [[nasls_bat1], [nasls_bat2], [nasls_bat3], [nasls_bat4], [nasls_bat5]];
const questionsChild = [
    "–ß–∏ –∫—Ä–∏—á–∞—Ç—å –Ω–∞ –≤–∞—Å –≤–¥–æ–º–∞ –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏?",
    "–ß–∏ –±–æ—ó—Ç–µ—Å—è –≤–∏ –∫–æ–≥–æ—Å—å –∑—ñ —Å–≤–æ—ó—Ö —Ä—ñ–¥–Ω–∏—Ö?",
    "–ß–∏ –æ–±—Ä–∞–∂–∞—é—Ç—å –≤–∞—Å —Å–ª–æ–≤–∞–º–∏ –∞–±–æ –ø—Ä–∏–Ω–∏–∂—É—é—Ç—å?",
    "–ß–∏ –ø–æ—á—É–≤–∞—î—Ç–µ—Å—è –≤–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ –≤–¥–æ–º–∞?"
];

const questionsAdult = [
    "–ß–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é—î –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –≤–∞—à—ñ –¥—ñ—ó –∞–±–æ —Ñ—ñ–Ω–∞–Ω—Å–∏?",
    "–ß–∏ –ø–æ–≥—Ä–æ–∂—É—î –≤–∞–º –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –∞–±–æ —Ö—Ç–æ—Å—å —ñ–∑ —Ä—ñ–¥–Ω–∏—Ö?",
    "–ß–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ –≤–∏ —Å–µ–±–µ –ø—Ä–∏–≥–Ω—ñ—á–µ–Ω–∏–º–∏ —á–µ—Ä–µ–∑ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏?",
    "–ß–∏ –∑–∞–±–æ—Ä–æ–Ω—è—î –≤–∞–º —Ö—Ç–æ—Å—å —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –¥—Ä—É–∑—è–º–∏ –∞–±–æ —Å—ñ–º‚Äô—î—é?"
];
const yes_no_answers = ["–¢–∞–∫", "–ù—ñ"];



const callfw= async (res,to,message) =>{

    if (!to || !message) {
        return () => {if (res) {res.status(400).json({ error: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–∞ –∫–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–±–æ–≤`—è–∑–∫–æ–≤—ñ" });}}
    }

    try {
        await client.calls.create({
            to,
            from: "+14067093516", 
            twiml: `<Response>
                        <Say rate="x-slow">${message}</Say>
                    </Response>`
        });
        if (res) {res.status(200).json({ success: "–î–∑–≤—ñ–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ" });}
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É:", error);
        if (res) {res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–ª–∏–∫–∞—Ç–∏" });}
    }
    

}


bot.on('text', async (nextMsg) => {
    try {
        const chatId = nextMsg.from.id;
        switch (nextMsg.text) {
            case "/start":
                bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", {
                    reply_markup: { keyboard: start_key, resize_keyboard: true }
                });
                break;
            case but2: 

            bot.sendMessage(chatId, "–Ø–∫—â–æ –≤–∏ –ø—ñ–¥–¥–∞—î—Ç–µ—Å—å –¥–æ–º–∞—à–Ω—å–æ–º—É –∞–±–æ –≥–µ–Ω–¥–µ—Ä–Ω–æ –∑—É–º–æ–≤–ª–µ–Ω–æ–º—É –Ω–∞—Å–∏–ª—å—Å—Ç–≤—É, –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –≤—ñ–¥ –º–æ–±—ñ–ª—å–Ω–æ—ó –±—Ä–∏–≥–∞–¥–∏, —è–∫–∞ –∑–º–æ–∂–µ –Ω–∞–¥–∞—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É —Ç–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞—Å –¥–æ –ø—Ä–∏—Ç—É–ª–∫—É, –¥–µ –≤–∞–º –∑–º–æ–∂—É—Ç—å –¥–æ–ø–æ–º–æ–≥—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏.");


            bot.sendMessage(chatId, "–î–æ–ø–æ–º–æ–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏ –Ω–∞—Ç–∏—Å–Ω–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤–∞—à–∏—Ö –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ —Ü—ñ—î—ó –∫–Ω–æ–ø–∫–∏ –≤–∞—à—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è, —ñ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π –≤–∏–∫–ª–∏–∫ –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —è–∫–∏–π –æ—Ç—Ä–∏–º—É—î –≤–∞—à—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–ª—å–Ω—ñ–π –º–æ–±—ñ–ª—å–Ω—ñ–π –±—Ä–∏–≥–∞–¥—ñ, —â–æ –≤–∏ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ –¥–æ–ø–æ–º–æ–≥–∏. –Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑‚Äô—è–≤–ª—è—î—Ç—å—Å—è –≤—ñ–ª—å–Ω–∞ –±—Ä–∏–≥–∞–¥–∞, –≤–æ–Ω–∞ –≤–∏—Ä—É—à–∞—î –¥–æ –≤–∞—Å –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É.");
    

            const key = {
                reply_markup: {
                    keyboard: [[{ text: "üìç –ù–∞–¥–∞—Ç–∏ –≥–µ–æ–ø–∏–∑–∏—Ü—ñ—é", request_location: true }]],
                    resize_keyboard: true, 
                    one_time_keyboard: true 
                }
            };
            
            setTimeout(() => {
                bot.sendMessage(chatId, "–ó–∞–ø–∏—Ç –ø—Ä–æ –≥–µ–æ–ø–∏–∑–∏—Ü—ñ—é:", key)
            },100);

            break;
            case but1:
                bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å:", {
                    reply_markup: { keyboard: nasl_key, resize_keyboard: true }
                });
                break;

            case nasl_bat1:
                bot.sendMessage(chatId, `–Ø–∫—â–æ –≤–∏ –ø–æ—Å—Ç—Ä–∞–∂–¥–∞–ª–∏ –≤—ñ–¥ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞ –∞–±–æ —Å—Ç–∞–ª–∏ –π–æ–≥–æ —Å–≤—ñ–¥–∫–æ–º - —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞ —Ü—ñ–ª–æ–¥–æ–±–æ–≤—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ ¬´–≥–∞—Ä—è—á—ñ –ª—ñ–Ω—ñ—ó¬ª +380668295573 - –ü—Ä–∏—Ç—É–ª–æ–∫ –¥–ª—è –∂—ñ–Ω–æ–∫ –ë–û ¬´–°–≤—ñ—Ç–ª–æ –ù–∞–¥—ñ—ó¬ª 102 - –ü–æ–ª—ñ—Ü—ñ—è`);
                break;

            case nasl_bat2:
                bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å:", {
                    reply_markup: { keyboard: nfl_key, resize_keyboard: true }
                });
                break;

            case l_bat1:
                askQuestions(chatId, questionsChild, 0, 0);
                break;
            
            case l_bat2:
                askQuestions(chatId, questionsAdult, 0, 0);
                break;

            case nasl_bat3:
                bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å:", {
                    reply_markup: { keyboard: nasls_key, resize_keyboard: true }
                });
                break;

            case nasls_bat1:
            case nasls_bat2:
            case nasls_bat3:
            case nasls_bat4:
            case nasls_bat5:
                bot.sendMessage(chatId, `–ö–æ–ª–∏ –í–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ —Å–µ–±–µ –Ω–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ, –∞–±–æ –≤ –Ω–µ–±–µ–∑–ø–µ—Ü—ñ - –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—î—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +380668295573 - –ü—Ä–∏—Ç—É–ª–æ–∫ –¥–ª—è –∂—ñ–Ω–æ–∫ –ë–û ¬´–°–≤—ñ—Ç–ª–æ –ù–∞–¥—ñ—ó¬ª`, {
                    reply_markup: { keyboard: start_key, resize_keyboard: true }
                });
                break;

            default:     
            if (yes_no_answers.includes(nextMsg.text)) {
                break;
            }
                bot.sendMessage(chatId, "–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–ø–∏—Ç. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –º–µ–Ω—é.");
                break;
        }
    } catch (e) {
        console.error("ERROR:", e);
    }
});

bot.on('location', (msg) => {
    const chatId = msg.chat.id;
    const latitude = msg.location.latitude;  
    const longitude = msg.location.longitude;  

    callfw('+380665190154',`Call for help at the coordinates: ${longitude} ${latitude}`);
    bot.sendMessage(chatId, `–í–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü—ñ—è: –®–∏—Ä–æ—Ç–∞: ${latitude}, –î–æ–ª–≥–æ—Ç–∞: ${longitude}`);
});


function askQuestions(chatId, questions, index, score) {
    if (index < questions.length) {
        bot.sendMessage(chatId, questions[index], {
            reply_markup: { keyboard: [["–¢–∞–∫", "–ù—ñ"]], resize_keyboard: true, one_time_keyboard: true }
        }).then(() => {
            bot.once('text', (msg) => {
                if (msg.text === "–¢–∞–∫") {
                    score++;
                }
                askQuestions(chatId, questions, index + 1, score);
            });
        });
    } else {
        let resultMsg = score >= 2 ? "–Ñ –æ–∑–Ω–∞–∫–∏ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞, –≤–∞—Ä—Ç–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –ø–æ –¥–æ–ø–æ–º–æ–≥—É." : "–û–∑–Ω–∞–∫ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–∞ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ, –∞–ª–µ –±—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ.";
        bot.sendMessage(chatId, resultMsg, {
            reply_markup: { keyboard: start_key, resize_keyboard: true }
        });
    }
}

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());
app.use(cors({
    origin: "https://krok-do-phs.vercel.app", 
    methods: ["GET", "POST"],
    allowedHeaders: ["Content-Type"],
  }));
app.post("/call", async (req, res) => {
    const { to, message } = req.body;
    callfw(res,to,message);
});
bot.setWebHook(`${URL}/bot${API_KEY_BOT}`);

app.post(`/bot${API_KEY_BOT}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});